def GenerateProposal(grids, offsets):
  """
  Proposal generator.

  Inputs:
  - grids: Activation grids, of shape (B, H', W', 2). Grid centers are 
  represented by their coordinates in the activation map.
  - offsets: Transformations obtained from the Prediction Network 
    of shape (B, A, H', W', 4) that will be used to generate proposals region 
    proposals. The transformation offsets[b, a, h, w] = (tx, ty, tw, th) will be 
    applied to the grids[b, a, h, w]. 
    Assume that tx and ty are in the range
    (-0.5, 0.5) and h,w are normalized and thus in the range (0, 1).

  Outputs:
  - proposals: Region proposals of shape (B, A, H', W', 4), represented by the
    coordinates of their top-left and bottom-right corners. Using the
    transform offsets[b, a, h, w] and girds[b, a, h, w] should give the proposals.
    The expected parametrization of the proposals is (xtl, ytl, xbr, ybr). 
  
  CAUTION: 
    Notice that the offsets here are parametrized as (x, y, w, h). 
    The proposals you return need to be of the form (xtl, ytl, xbr, ybr).
  """
  proposals = None
  
  
  #############################################################################
  # Given grid coordinates and the proposed offset for each bounding    #
  # box, compute the proposal coordinates using the transformation formulas   #
  # above.                                                                    #
  #############################################################################
  # 1. Follow the formulas above to convert the grid centers into proposals.

  # 2. Convert the proposals into (xtl, ytl, xbr, ybr) coordinate format as 
  # mentioned in the header and in the cell above that.
  a = offsets.size()[1]
  grid = grids.unsqueeze(1).repeat(1,a,1,1,1 )
  temp = offsets.clone()
  temp[:,:,:,:,0] = grid[:,:,:,:,0] + offsets[:,:,:,:,0]
  temp[:,:,:,:,1] = grid[:,:,:,:,1] + offsets[:,:,:,:,1]
  temp[:,:,:,:,2] = offsets[:,:,:,:,2]*7
  temp[:,:,:,:,3] = offsets[:,:,:,:,3]*7
  
  proposals = temp.clone()
  proposals[:,:,:,:,0] = temp[:,:,:,:,0] - torch.div(temp[:,:,:,:,2],2)
  proposals[:,:,:,:,1] = temp[:,:,:,:,1] - torch.div(temp[:,:,:,:,3],2)
  proposals[:,:,:,:,2] = temp[:,:,:,:,0] + torch.div(temp[:,:,:,:,2],2)
  proposals[:,:,:,:,3] = temp[:,:,:,:,1] + torch.div(temp[:,:,:,:,3],2)
      
  #############################################################################
  #                                                    #
  #############################################################################                        

  return proposals
